// <auto-generated />
using System;
using ForcWebApi.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace ForcWebApi.Migrations
{
    [DbContext(typeof(DataContext))]
    partial class DataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("DishUserDishCollection", b =>
                {
                    b.Property<Guid>("DishesId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserDishCollectionsId")
                        .HasColumnType("uuid");

                    b.HasKey("DishesId", "UserDishCollectionsId");

                    b.HasIndex("UserDishCollectionsId");

                    b.ToTable("DishUserDishCollection");
                });

            modelBuilder.Entity("ForcWebApi.Infrastructure.Entities.CompositionItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid");

                    b.Property<double>("ProductWeightG")
                        .HasColumnType("double precision");

                    b.Property<Guid>("ResourseSpecificationId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("ResourseSpecificationId");

                    b.ToTable("CompositionItem");
                });

            modelBuilder.Entity("ForcWebApi.Infrastructure.Entities.DailyRate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<double>("CaloriesRate")
                        .HasColumnType("double precision");

                    b.Property<double>("CarbohydrateRate")
                        .HasColumnType("double precision");

                    b.Property<double>("FatRate")
                        .HasColumnType("double precision");

                    b.Property<double>("ProteinRate")
                        .HasColumnType("double precision");

                    b.Property<Guid>("TargetId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("DailyRate");
                });

            modelBuilder.Entity("ForcWebApi.Infrastructure.Entities.Dish", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("DishName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("ResourseSpecificationId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ResourseSpecificationId");

                    b.ToTable("Dish");
                });

            modelBuilder.Entity("ForcWebApi.Infrastructure.Entities.Meal", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("MealTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Meal");
                });

            modelBuilder.Entity("ForcWebApi.Infrastructure.Entities.MealItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("DishId")
                        .HasColumnType("uuid");

                    b.Property<double>("DishWeightG")
                        .HasColumnType("double precision");

                    b.Property<Guid>("MealId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("MealId");

                    b.ToTable("MealItem");
                });

            modelBuilder.Entity("ForcWebApi.Infrastructure.Entities.PhysicalActivityCatalog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double>("PhysicalActivityMultiplier")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.ToTable("PhysicalActivityCatalog");
                });

            modelBuilder.Entity("ForcWebApi.Infrastructure.Entities.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<double>("Calories")
                        .HasColumnType("double precision");

                    b.Property<double>("Carbohydrate")
                        .HasColumnType("double precision");

                    b.Property<double>("Fat")
                        .HasColumnType("double precision");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double>("Protein")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.ToTable("Product");
                });

            modelBuilder.Entity("ForcWebApi.Infrastructure.Entities.ResourseSpecification", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("DishId")
                        .HasColumnType("uuid");

                    b.Property<double>("OutputDishWeightG")
                        .HasColumnType("double precision");

                    b.Property<Guid>("SpecNutritionValueId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("SpecNutritionValueId");

                    b.ToTable("ResourseSpecification");
                });

            modelBuilder.Entity("ForcWebApi.Infrastructure.Entities.SpecNutritionValue", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<double>("Calories")
                        .HasColumnType("double precision");

                    b.Property<double>("Carbohydrate")
                        .HasColumnType("double precision");

                    b.Property<double>("Fat")
                        .HasColumnType("double precision");

                    b.Property<double>("Protein")
                        .HasColumnType("double precision");

                    b.Property<Guid>("ResourseSpecificationId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("SpecNutritionValue");
                });

            modelBuilder.Entity("ForcWebApi.Infrastructure.Entities.Target", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<double>("CurrentBodyWeight")
                        .HasColumnType("double precision");

                    b.Property<Guid>("DailyRateId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("DateFinish")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DateStart")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("Relevance")
                        .HasColumnType("boolean");

                    b.Property<double>("TargetBodyWeight")
                        .HasColumnType("double precision");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("DailyRateId");

                    b.HasIndex("UserId");

                    b.ToTable("Target");
                });

            modelBuilder.Entity("ForcWebApi.Infrastructure.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("BirthDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("Gender")
                        .HasColumnType("text");

                    b.Property<double>("Height")
                        .HasColumnType("double precision");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("text");

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("text");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("PhysicalActivityId")
                        .HasColumnType("uuid");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<int?>("Sex")
                        .HasColumnType("integer");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<Guid>("UserDishCollectionId")
                        .HasColumnType("uuid");

                    b.Property<string>("UserName")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("PhysicalActivityId");

                    b.HasIndex("UserDishCollectionId");

                    b.ToTable("User");
                });

            modelBuilder.Entity("ForcWebApi.Infrastructure.Entities.UserDishCollection", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("UserDishCollection");
                });

            modelBuilder.Entity("ForcWebApi.Infrastructure.Entities.WeightCondition", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<double>("BodyWeight")
                        .HasColumnType("double precision");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("WeightCondition");
                });

            modelBuilder.Entity("DishUserDishCollection", b =>
                {
                    b.HasOne("ForcWebApi.Infrastructure.Entities.Dish", null)
                        .WithMany()
                        .HasForeignKey("DishesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ForcWebApi.Infrastructure.Entities.UserDishCollection", null)
                        .WithMany()
                        .HasForeignKey("UserDishCollectionsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ForcWebApi.Infrastructure.Entities.CompositionItem", b =>
                {
                    b.HasOne("ForcWebApi.Infrastructure.Entities.Product", null)
                        .WithMany("CompositionItems")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ForcWebApi.Infrastructure.Entities.ResourseSpecification", null)
                        .WithMany("Composition")
                        .HasForeignKey("ResourseSpecificationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ForcWebApi.Infrastructure.Entities.Dish", b =>
                {
                    b.HasOne("ForcWebApi.Infrastructure.Entities.ResourseSpecification", "ResourseSpecification")
                        .WithMany()
                        .HasForeignKey("ResourseSpecificationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ResourseSpecification");
                });

            modelBuilder.Entity("ForcWebApi.Infrastructure.Entities.Meal", b =>
                {
                    b.HasOne("ForcWebApi.Infrastructure.Entities.User", null)
                        .WithMany("Meals")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ForcWebApi.Infrastructure.Entities.MealItem", b =>
                {
                    b.HasOne("ForcWebApi.Infrastructure.Entities.Meal", null)
                        .WithMany("MealItems")
                        .HasForeignKey("MealId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ForcWebApi.Infrastructure.Entities.ResourseSpecification", b =>
                {
                    b.HasOne("ForcWebApi.Infrastructure.Entities.SpecNutritionValue", "SpecNutritionValue")
                        .WithMany()
                        .HasForeignKey("SpecNutritionValueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SpecNutritionValue");
                });

            modelBuilder.Entity("ForcWebApi.Infrastructure.Entities.Target", b =>
                {
                    b.HasOne("ForcWebApi.Infrastructure.Entities.DailyRate", "DailyRate")
                        .WithMany()
                        .HasForeignKey("DailyRateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ForcWebApi.Infrastructure.Entities.User", null)
                        .WithMany("Targets")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DailyRate");
                });

            modelBuilder.Entity("ForcWebApi.Infrastructure.Entities.User", b =>
                {
                    b.HasOne("ForcWebApi.Infrastructure.Entities.PhysicalActivityCatalog", "PhysicalActivity")
                        .WithMany()
                        .HasForeignKey("PhysicalActivityId");

                    b.HasOne("ForcWebApi.Infrastructure.Entities.UserDishCollection", "UserDishCollection")
                        .WithMany()
                        .HasForeignKey("UserDishCollectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PhysicalActivity");

                    b.Navigation("UserDishCollection");
                });

            modelBuilder.Entity("ForcWebApi.Infrastructure.Entities.WeightCondition", b =>
                {
                    b.HasOne("ForcWebApi.Infrastructure.Entities.User", null)
                        .WithMany("WeightConditions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ForcWebApi.Infrastructure.Entities.Meal", b =>
                {
                    b.Navigation("MealItems");
                });

            modelBuilder.Entity("ForcWebApi.Infrastructure.Entities.Product", b =>
                {
                    b.Navigation("CompositionItems");
                });

            modelBuilder.Entity("ForcWebApi.Infrastructure.Entities.ResourseSpecification", b =>
                {
                    b.Navigation("Composition");
                });

            modelBuilder.Entity("ForcWebApi.Infrastructure.Entities.User", b =>
                {
                    b.Navigation("Meals");

                    b.Navigation("Targets");

                    b.Navigation("WeightConditions");
                });
#pragma warning restore 612, 618
        }
    }
}
