// <auto-generated />
using System;
using Forc.WebApi.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Forc.WebApi.Migrations
{
    [DbContext(typeof(DataContext))]
    partial class DataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("DishDishCategory", b =>
                {
                    b.Property<Guid>("DishCategoryId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("DishId")
                        .HasColumnType("uuid");

                    b.HasKey("DishCategoryId", "DishId");

                    b.HasIndex("DishId");

                    b.ToTable("DishDishCategory");
                });

            modelBuilder.Entity("DishUserDishCollection", b =>
                {
                    b.Property<Guid>("DishId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserDishCollectionId")
                        .HasColumnType("uuid");

                    b.HasKey("DishId", "UserDishCollectionId");

                    b.HasIndex("UserDishCollectionId");

                    b.ToTable("DishUserDishCollection");
                });

            modelBuilder.Entity("Forc.WebApi.Infrastructure.Entities.CompositionItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid");

                    b.Property<double>("ProductWeightG")
                        .HasColumnType("double precision");

                    b.Property<Guid>("ResourceSpecificationId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("ResourceSpecificationId");

                    b.ToTable("CompositionItem");
                });

            modelBuilder.Entity("Forc.WebApi.Infrastructure.Entities.DailyRate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<double>("CaloriesRate")
                        .HasColumnType("double precision");

                    b.Property<double>("CarbohydrateRate")
                        .HasColumnType("double precision");

                    b.Property<double>("FatRate")
                        .HasColumnType("double precision");

                    b.Property<double>("ProteinRate")
                        .HasColumnType("double precision");

                    b.Property<Guid>("UserTargetId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("DailyRate");
                });

            modelBuilder.Entity("Forc.WebApi.Infrastructure.Entities.Dish", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("DishName")
                        .HasColumnType("text");

                    b.Property<Guid>("ResourceSpecificationId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("Dish");
                });

            modelBuilder.Entity("Forc.WebApi.Infrastructure.Entities.Meal", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("MealTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Meal");
                });

            modelBuilder.Entity("Forc.WebApi.Infrastructure.Entities.MealItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("DishId")
                        .HasColumnType("uuid");

                    b.Property<double>("DishWeightG")
                        .HasColumnType("double precision");

                    b.Property<Guid>("MealId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("DishId");

                    b.HasIndex("MealId");

                    b.ToTable("MealItem");
                });

            modelBuilder.Entity("Forc.WebApi.Infrastructure.Entities.PhysicalActivityCatalog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<double>("PhysicalActivityMultiplier")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.ToTable("PhysicalActivityCatalog");
                });

            modelBuilder.Entity("Forc.WebApi.Infrastructure.Entities.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<double>("Calories")
                        .HasColumnType("double precision");

                    b.Property<double>("Carbohydrate")
                        .HasColumnType("double precision");

                    b.Property<double>("Fat")
                        .HasColumnType("double precision");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<Guid?>("ProductGroupId")
                        .HasColumnType("uuid");

                    b.Property<double>("Protein")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.HasIndex("ProductGroupId");

                    b.ToTable("Product");
                });

            modelBuilder.Entity("Forc.WebApi.Infrastructure.Entities.ResourceSpecification", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("DishId")
                        .HasColumnType("uuid");

                    b.Property<double>("OutputDishWeightG")
                        .HasColumnType("double precision");

                    b.Property<Guid>("SpecNutritionValueId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("DishId")
                        .IsUnique();

                    b.ToTable("ResourceSpecification");
                });

            modelBuilder.Entity("Forc.WebApi.Infrastructure.Entities.SpecNutritionValue", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<double>("Calories")
                        .HasColumnType("double precision");

                    b.Property<double>("Carbohydrate")
                        .HasColumnType("double precision");

                    b.Property<double>("Fat")
                        .HasColumnType("double precision");

                    b.Property<double>("Protein")
                        .HasColumnType("double precision");

                    b.Property<Guid>("ResourceSpecificationId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ResourceSpecificationId")
                        .IsUnique();

                    b.ToTable("SpecNutritionValue");
                });

            modelBuilder.Entity("Forc.WebApi.Infrastructure.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("BirthDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("Gender")
                        .HasColumnType("text");

                    b.Property<double>("Height")
                        .HasColumnType("double precision");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("PhysicalActivityId")
                        .HasColumnType("uuid");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<int?>("Sex")
                        .HasColumnType("integer");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<Guid>("UserDishCollectionId")
                        .HasColumnType("uuid");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.HasIndex("PhysicalActivityId");

                    b.HasIndex("UserDishCollectionId")
                        .IsUnique();

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Forc.WebApi.Infrastructure.Entities.UserDishCollection", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("UserDishCollection");
                });

            modelBuilder.Entity("Forc.WebApi.Infrastructure.Entities.UserTarget", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<double>("CurrentBodyWeight")
                        .HasColumnType("double precision");

                    b.Property<Guid>("DailyRateId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("DateFinish")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DateStart")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("Relevance")
                        .HasColumnType("boolean");

                    b.Property<double>("TargetBodyWeight")
                        .HasColumnType("double precision");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("DailyRateId")
                        .IsUnique();

                    b.HasIndex("UserId");

                    b.ToTable("UserTarget");
                });

            modelBuilder.Entity("Forc.WebApi.Infrastructure.Entities.WeightCondition", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<double>("BodyWeight")
                        .HasColumnType("double precision");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("WeightCondition");
                });

            modelBuilder.Entity("Forc.WebApi.Infrastructure.Models.DishCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CategoryName")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("DishCategory");
                });

            modelBuilder.Entity("Forc.WebApi.Infrastructure.Models.ProductGroup", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("GroupName")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("ProductGroup");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("DishDishCategory", b =>
                {
                    b.HasOne("Forc.WebApi.Infrastructure.Models.DishCategory", null)
                        .WithMany()
                        .HasForeignKey("DishCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Forc.WebApi.Infrastructure.Entities.Dish", null)
                        .WithMany()
                        .HasForeignKey("DishId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DishUserDishCollection", b =>
                {
                    b.HasOne("Forc.WebApi.Infrastructure.Entities.Dish", null)
                        .WithMany()
                        .HasForeignKey("DishId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Forc.WebApi.Infrastructure.Entities.UserDishCollection", null)
                        .WithMany()
                        .HasForeignKey("UserDishCollectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Forc.WebApi.Infrastructure.Entities.CompositionItem", b =>
                {
                    b.HasOne("Forc.WebApi.Infrastructure.Entities.Product", "Product")
                        .WithMany("CompositionItems")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Forc.WebApi.Infrastructure.Entities.ResourceSpecification", "ResourceSpecification")
                        .WithMany("Composition")
                        .HasForeignKey("ResourceSpecificationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("ResourceSpecification");
                });

            modelBuilder.Entity("Forc.WebApi.Infrastructure.Entities.Meal", b =>
                {
                    b.HasOne("Forc.WebApi.Infrastructure.Entities.User", "User")
                        .WithMany("Meals")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Forc.WebApi.Infrastructure.Entities.MealItem", b =>
                {
                    b.HasOne("Forc.WebApi.Infrastructure.Entities.Dish", "Dish")
                        .WithMany("MealItems")
                        .HasForeignKey("DishId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Forc.WebApi.Infrastructure.Entities.Meal", "Meal")
                        .WithMany("MealItems")
                        .HasForeignKey("MealId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Dish");

                    b.Navigation("Meal");
                });

            modelBuilder.Entity("Forc.WebApi.Infrastructure.Entities.Product", b =>
                {
                    b.HasOne("Forc.WebApi.Infrastructure.Models.ProductGroup", "ProductGroup")
                        .WithMany("Products")
                        .HasForeignKey("ProductGroupId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("ProductGroup");
                });

            modelBuilder.Entity("Forc.WebApi.Infrastructure.Entities.ResourceSpecification", b =>
                {
                    b.HasOne("Forc.WebApi.Infrastructure.Entities.Dish", "Dish")
                        .WithOne("ResourseSpecification")
                        .HasForeignKey("Forc.WebApi.Infrastructure.Entities.ResourceSpecification", "DishId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Dish");
                });

            modelBuilder.Entity("Forc.WebApi.Infrastructure.Entities.SpecNutritionValue", b =>
                {
                    b.HasOne("Forc.WebApi.Infrastructure.Entities.ResourceSpecification", "ResourceSpecification")
                        .WithOne("SpecNutritionValue")
                        .HasForeignKey("Forc.WebApi.Infrastructure.Entities.SpecNutritionValue", "ResourceSpecificationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ResourceSpecification");
                });

            modelBuilder.Entity("Forc.WebApi.Infrastructure.Entities.User", b =>
                {
                    b.HasOne("Forc.WebApi.Infrastructure.Entities.PhysicalActivityCatalog", "PhysicalActivity")
                        .WithMany("Users")
                        .HasForeignKey("PhysicalActivityId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Forc.WebApi.Infrastructure.Entities.UserDishCollection", "UserDishCollection")
                        .WithOne("User")
                        .HasForeignKey("Forc.WebApi.Infrastructure.Entities.User", "UserDishCollectionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("PhysicalActivity");

                    b.Navigation("UserDishCollection");
                });

            modelBuilder.Entity("Forc.WebApi.Infrastructure.Entities.UserTarget", b =>
                {
                    b.HasOne("Forc.WebApi.Infrastructure.Entities.DailyRate", "DailyRate")
                        .WithOne("UserTarget")
                        .HasForeignKey("Forc.WebApi.Infrastructure.Entities.UserTarget", "DailyRateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Forc.WebApi.Infrastructure.Entities.User", "User")
                        .WithMany("Targets")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("DailyRate");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Forc.WebApi.Infrastructure.Entities.WeightCondition", b =>
                {
                    b.HasOne("Forc.WebApi.Infrastructure.Entities.User", "User")
                        .WithMany("WeightConditions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("Forc.WebApi.Infrastructure.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("Forc.WebApi.Infrastructure.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Forc.WebApi.Infrastructure.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("Forc.WebApi.Infrastructure.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Forc.WebApi.Infrastructure.Entities.DailyRate", b =>
                {
                    b.Navigation("UserTarget")
                        .IsRequired();
                });

            modelBuilder.Entity("Forc.WebApi.Infrastructure.Entities.Dish", b =>
                {
                    b.Navigation("MealItems");

                    b.Navigation("ResourseSpecification")
                        .IsRequired();
                });

            modelBuilder.Entity("Forc.WebApi.Infrastructure.Entities.Meal", b =>
                {
                    b.Navigation("MealItems");
                });

            modelBuilder.Entity("Forc.WebApi.Infrastructure.Entities.PhysicalActivityCatalog", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("Forc.WebApi.Infrastructure.Entities.Product", b =>
                {
                    b.Navigation("CompositionItems");
                });

            modelBuilder.Entity("Forc.WebApi.Infrastructure.Entities.ResourceSpecification", b =>
                {
                    b.Navigation("Composition");

                    b.Navigation("SpecNutritionValue")
                        .IsRequired();
                });

            modelBuilder.Entity("Forc.WebApi.Infrastructure.Entities.User", b =>
                {
                    b.Navigation("Meals");

                    b.Navigation("Targets");

                    b.Navigation("WeightConditions");
                });

            modelBuilder.Entity("Forc.WebApi.Infrastructure.Entities.UserDishCollection", b =>
                {
                    b.Navigation("User");
                });

            modelBuilder.Entity("Forc.WebApi.Infrastructure.Models.ProductGroup", b =>
                {
                    b.Navigation("Products");
                });
#pragma warning restore 612, 618
        }
    }
}
